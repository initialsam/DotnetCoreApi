// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DotnetCoreApi.Models
{
    public partial class ContosouniversityContext
    {

        /// <summary>  
        /// Overriding Save Changes  
        /// </summary>  
        /// <returns></returns>  
        public override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default)
        {
            var selectedEntityList = this.ChangeTracker.Entries();
            foreach (var entity in selectedEntityList)
            {
                if (entity.Entity is ISoftDeleteable softDeleteable && entity.State == EntityState.Deleted)
                {
                    entity.State = EntityState.Modified;
                    softDeleteable.IsDeleted = true;
                }

            }

            return base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
        }
        public async Task<Department> DepartmentStoredProcedureInsert(Department department)
        {
            //改用擴充方法 會比較好嗎
            var res = await this.Department.FromSqlInterpolated(
                  $"EXEC Department_Insert { department.Name}, { department.Budget}, {department.StartDate}, {department.InstructorId}, {department.DateModified}, {department.IsDeleted}")
                    .ToListAsync();
            var newDepartment = res.SingleOrDefault();
            return newDepartment;
        }
        public async Task<Department> DepartmentStoredProcedureUpdate( Department department)
        {
            var res = await this.Department.FromSqlInterpolated(
                  $"EXEC Department_Update {department.DepartmentId},{ department.Name}, { department.Budget}, {department.StartDate}, {department.InstructorId}, {department.RowVersion}, {department.DateModified}, {department.IsDeleted}")
                   .ToListAsync();
            var updatedDepartment = res.SingleOrDefault();
            return updatedDepartment;
        }

        public async Task<bool> DepartmentStoredProcedureDelete(int id,Department department)
        {
            var rowsAffected = await this.Database.ExecuteSqlInterpolatedAsync(
                  $"EXEC Department_Delete {id},{department.RowVersion}");
            
            return rowsAffected == 1;
        }
    }
}